// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	redis "github.com/redis/go-redis/v9"
	mock "github.com/stretchr/testify/mock"
)

// RedisPubSub is an autogenerated mock type for the RedisPubSub type
type RedisPubSub struct {
	mock.Mock
}

type RedisPubSub_Expecter struct {
	mock *mock.Mock
}

func (_m *RedisPubSub) EXPECT() *RedisPubSub_Expecter {
	return &RedisPubSub_Expecter{mock: &_m.Mock}
}

// Channel provides a mock function with given fields:
func (_m *RedisPubSub) Channel() <-chan *redis.Message {
	ret := _m.Called()

	var r0 <-chan *redis.Message
	if rf, ok := ret.Get(0).(func() <-chan *redis.Message); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *redis.Message)
		}
	}

	return r0
}

// RedisPubSub_Channel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Channel'
type RedisPubSub_Channel_Call struct {
	*mock.Call
}

// Channel is a helper method to define mock.On call
func (_e *RedisPubSub_Expecter) Channel() *RedisPubSub_Channel_Call {
	return &RedisPubSub_Channel_Call{Call: _e.mock.On("Channel")}
}

func (_c *RedisPubSub_Channel_Call) Run(run func()) *RedisPubSub_Channel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RedisPubSub_Channel_Call) Return(_a0 <-chan *redis.Message) *RedisPubSub_Channel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RedisPubSub_Channel_Call) RunAndReturn(run func() <-chan *redis.Message) *RedisPubSub_Channel_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with given fields:
func (_m *RedisPubSub) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RedisPubSub_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type RedisPubSub_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *RedisPubSub_Expecter) Close() *RedisPubSub_Close_Call {
	return &RedisPubSub_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *RedisPubSub_Close_Call) Run(run func()) *RedisPubSub_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RedisPubSub_Close_Call) Return(_a0 error) *RedisPubSub_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RedisPubSub_Close_Call) RunAndReturn(run func() error) *RedisPubSub_Close_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewRedisPubSub interface {
	mock.TestingT
	Cleanup(func())
}

// NewRedisPubSub creates a new instance of RedisPubSub. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRedisPubSub(t mockConstructorTestingTNewRedisPubSub) *RedisPubSub {
	mock := &RedisPubSub{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
