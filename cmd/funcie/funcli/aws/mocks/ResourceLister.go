// Code generated by mockery v2.33.1. DO NOT EDIT.

package mocks

import (
	context "context"

	aws "github.com/Kapps/funcie/cmd/funcie/funcli/aws"

	mock "github.com/stretchr/testify/mock"
)

// ResourceLister is an autogenerated mock type for the ResourceLister type
type ResourceLister struct {
	mock.Mock
}

type ResourceLister_Expecter struct {
	mock *mock.Mock
}

func (_m *ResourceLister) EXPECT() *ResourceLister_Expecter {
	return &ResourceLister_Expecter{mock: &_m.Mock}
}

// ListElastiCacheClusters provides a mock function with given fields: ctx
func (_m *ResourceLister) ListElastiCacheClusters(ctx context.Context) ([]aws.ElastiCacheCluster, error) {
	ret := _m.Called(ctx)

	var r0 []aws.ElastiCacheCluster
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]aws.ElastiCacheCluster, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []aws.ElastiCacheCluster); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]aws.ElastiCacheCluster)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourceLister_ListElastiCacheClusters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListElastiCacheClusters'
type ResourceLister_ListElastiCacheClusters_Call struct {
	*mock.Call
}

// ListElastiCacheClusters is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ResourceLister_Expecter) ListElastiCacheClusters(ctx interface{}) *ResourceLister_ListElastiCacheClusters_Call {
	return &ResourceLister_ListElastiCacheClusters_Call{Call: _e.mock.On("ListElastiCacheClusters", ctx)}
}

func (_c *ResourceLister_ListElastiCacheClusters_Call) Run(run func(ctx context.Context)) *ResourceLister_ListElastiCacheClusters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ResourceLister_ListElastiCacheClusters_Call) Return(_a0 []aws.ElastiCacheCluster, _a1 error) *ResourceLister_ListElastiCacheClusters_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ResourceLister_ListElastiCacheClusters_Call) RunAndReturn(run func(context.Context) ([]aws.ElastiCacheCluster, error)) *ResourceLister_ListElastiCacheClusters_Call {
	_c.Call.Return(run)
	return _c
}

// ListSubnets provides a mock function with given fields: ctx
func (_m *ResourceLister) ListSubnets(ctx context.Context) ([]aws.Subnet, error) {
	ret := _m.Called(ctx)

	var r0 []aws.Subnet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]aws.Subnet, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []aws.Subnet); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]aws.Subnet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourceLister_ListSubnets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSubnets'
type ResourceLister_ListSubnets_Call struct {
	*mock.Call
}

// ListSubnets is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ResourceLister_Expecter) ListSubnets(ctx interface{}) *ResourceLister_ListSubnets_Call {
	return &ResourceLister_ListSubnets_Call{Call: _e.mock.On("ListSubnets", ctx)}
}

func (_c *ResourceLister_ListSubnets_Call) Run(run func(ctx context.Context)) *ResourceLister_ListSubnets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ResourceLister_ListSubnets_Call) Return(_a0 []aws.Subnet, _a1 error) *ResourceLister_ListSubnets_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ResourceLister_ListSubnets_Call) RunAndReturn(run func(context.Context) ([]aws.Subnet, error)) *ResourceLister_ListSubnets_Call {
	_c.Call.Return(run)
	return _c
}

// ListVpcs provides a mock function with given fields: ctx
func (_m *ResourceLister) ListVpcs(ctx context.Context) ([]aws.Vpc, error) {
	ret := _m.Called(ctx)

	var r0 []aws.Vpc
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]aws.Vpc, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []aws.Vpc); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]aws.Vpc)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourceLister_ListVpcs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListVpcs'
type ResourceLister_ListVpcs_Call struct {
	*mock.Call
}

// ListVpcs is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ResourceLister_Expecter) ListVpcs(ctx interface{}) *ResourceLister_ListVpcs_Call {
	return &ResourceLister_ListVpcs_Call{Call: _e.mock.On("ListVpcs", ctx)}
}

func (_c *ResourceLister_ListVpcs_Call) Run(run func(ctx context.Context)) *ResourceLister_ListVpcs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ResourceLister_ListVpcs_Call) Return(_a0 []aws.Vpc, _a1 error) *ResourceLister_ListVpcs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ResourceLister_ListVpcs_Call) RunAndReturn(run func(context.Context) ([]aws.Vpc, error)) *ResourceLister_ListVpcs_Call {
	_c.Call.Return(run)
	return _c
}

// NewResourceLister creates a new instance of ResourceLister. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewResourceLister(t interface {
	mock.TestingT
	Cleanup(func())
}) *ResourceLister {
	mock := &ResourceLister{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
