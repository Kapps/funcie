// Code generated by mockery v2.33.1. DO NOT EDIT.

package mocks

import (
	context "context"

	ec2 "github.com/aws/aws-sdk-go-v2/service/ec2"
	mock "github.com/stretchr/testify/mock"
)

// EC2Client is an autogenerated mock type for the EC2Client type
type EC2Client struct {
	mock.Mock
}

type EC2Client_Expecter struct {
	mock *mock.Mock
}

func (_m *EC2Client) EXPECT() *EC2Client_Expecter {
	return &EC2Client_Expecter{mock: &_m.Mock}
}

// DescribeRouteTables provides a mock function with given fields: ctx, params, opts
func (_m *EC2Client) DescribeRouteTables(ctx context.Context, params *ec2.DescribeRouteTablesInput, opts ...func(*ec2.Options)) (*ec2.DescribeRouteTablesOutput, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *ec2.DescribeRouteTablesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeRouteTablesInput, ...func(*ec2.Options)) (*ec2.DescribeRouteTablesOutput, error)); ok {
		return rf(ctx, params, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeRouteTablesInput, ...func(*ec2.Options)) *ec2.DescribeRouteTablesOutput); ok {
		r0 = rf(ctx, params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeRouteTablesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeRouteTablesInput, ...func(*ec2.Options)) error); ok {
		r1 = rf(ctx, params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EC2Client_DescribeRouteTables_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeRouteTables'
type EC2Client_DescribeRouteTables_Call struct {
	*mock.Call
}

// DescribeRouteTables is a helper method to define mock.On call
//   - ctx context.Context
//   - params *ec2.DescribeRouteTablesInput
//   - opts ...func(*ec2.Options)
func (_e *EC2Client_Expecter) DescribeRouteTables(ctx interface{}, params interface{}, opts ...interface{}) *EC2Client_DescribeRouteTables_Call {
	return &EC2Client_DescribeRouteTables_Call{Call: _e.mock.On("DescribeRouteTables",
		append([]interface{}{ctx, params}, opts...)...)}
}

func (_c *EC2Client_DescribeRouteTables_Call) Run(run func(ctx context.Context, params *ec2.DescribeRouteTablesInput, opts ...func(*ec2.Options))) *EC2Client_DescribeRouteTables_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*ec2.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*ec2.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*ec2.DescribeRouteTablesInput), variadicArgs...)
	})
	return _c
}

func (_c *EC2Client_DescribeRouteTables_Call) Return(_a0 *ec2.DescribeRouteTablesOutput, _a1 error) *EC2Client_DescribeRouteTables_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EC2Client_DescribeRouteTables_Call) RunAndReturn(run func(context.Context, *ec2.DescribeRouteTablesInput, ...func(*ec2.Options)) (*ec2.DescribeRouteTablesOutput, error)) *EC2Client_DescribeRouteTables_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeSubnets provides a mock function with given fields: ctx, params, opts
func (_m *EC2Client) DescribeSubnets(ctx context.Context, params *ec2.DescribeSubnetsInput, opts ...func(*ec2.Options)) (*ec2.DescribeSubnetsOutput, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *ec2.DescribeSubnetsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeSubnetsInput, ...func(*ec2.Options)) (*ec2.DescribeSubnetsOutput, error)); ok {
		return rf(ctx, params, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeSubnetsInput, ...func(*ec2.Options)) *ec2.DescribeSubnetsOutput); ok {
		r0 = rf(ctx, params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeSubnetsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeSubnetsInput, ...func(*ec2.Options)) error); ok {
		r1 = rf(ctx, params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EC2Client_DescribeSubnets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeSubnets'
type EC2Client_DescribeSubnets_Call struct {
	*mock.Call
}

// DescribeSubnets is a helper method to define mock.On call
//   - ctx context.Context
//   - params *ec2.DescribeSubnetsInput
//   - opts ...func(*ec2.Options)
func (_e *EC2Client_Expecter) DescribeSubnets(ctx interface{}, params interface{}, opts ...interface{}) *EC2Client_DescribeSubnets_Call {
	return &EC2Client_DescribeSubnets_Call{Call: _e.mock.On("DescribeSubnets",
		append([]interface{}{ctx, params}, opts...)...)}
}

func (_c *EC2Client_DescribeSubnets_Call) Run(run func(ctx context.Context, params *ec2.DescribeSubnetsInput, opts ...func(*ec2.Options))) *EC2Client_DescribeSubnets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*ec2.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*ec2.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*ec2.DescribeSubnetsInput), variadicArgs...)
	})
	return _c
}

func (_c *EC2Client_DescribeSubnets_Call) Return(_a0 *ec2.DescribeSubnetsOutput, _a1 error) *EC2Client_DescribeSubnets_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EC2Client_DescribeSubnets_Call) RunAndReturn(run func(context.Context, *ec2.DescribeSubnetsInput, ...func(*ec2.Options)) (*ec2.DescribeSubnetsOutput, error)) *EC2Client_DescribeSubnets_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeVpcs provides a mock function with given fields: ctx, params, opts
func (_m *EC2Client) DescribeVpcs(ctx context.Context, params *ec2.DescribeVpcsInput, opts ...func(*ec2.Options)) (*ec2.DescribeVpcsOutput, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *ec2.DescribeVpcsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeVpcsInput, ...func(*ec2.Options)) (*ec2.DescribeVpcsOutput, error)); ok {
		return rf(ctx, params, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeVpcsInput, ...func(*ec2.Options)) *ec2.DescribeVpcsOutput); ok {
		r0 = rf(ctx, params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeVpcsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeVpcsInput, ...func(*ec2.Options)) error); ok {
		r1 = rf(ctx, params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EC2Client_DescribeVpcs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeVpcs'
type EC2Client_DescribeVpcs_Call struct {
	*mock.Call
}

// DescribeVpcs is a helper method to define mock.On call
//   - ctx context.Context
//   - params *ec2.DescribeVpcsInput
//   - opts ...func(*ec2.Options)
func (_e *EC2Client_Expecter) DescribeVpcs(ctx interface{}, params interface{}, opts ...interface{}) *EC2Client_DescribeVpcs_Call {
	return &EC2Client_DescribeVpcs_Call{Call: _e.mock.On("DescribeVpcs",
		append([]interface{}{ctx, params}, opts...)...)}
}

func (_c *EC2Client_DescribeVpcs_Call) Run(run func(ctx context.Context, params *ec2.DescribeVpcsInput, opts ...func(*ec2.Options))) *EC2Client_DescribeVpcs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*ec2.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*ec2.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*ec2.DescribeVpcsInput), variadicArgs...)
	})
	return _c
}

func (_c *EC2Client_DescribeVpcs_Call) Return(_a0 *ec2.DescribeVpcsOutput, _a1 error) *EC2Client_DescribeVpcs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EC2Client_DescribeVpcs_Call) RunAndReturn(run func(context.Context, *ec2.DescribeVpcsInput, ...func(*ec2.Options)) (*ec2.DescribeVpcsOutput, error)) *EC2Client_DescribeVpcs_Call {
	_c.Call.Return(run)
	return _c
}

// NewEC2Client creates a new instance of EC2Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEC2Client(t interface {
	mock.TestingT
	Cleanup(func())
}) *EC2Client {
	mock := &EC2Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
