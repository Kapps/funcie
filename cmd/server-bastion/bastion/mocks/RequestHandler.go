// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	context "context"
	"github.com/Kapps/funcie/cmd/server-bastion/bastion"

	funcie "github.com/Kapps/funcie/pkg/funcie"

	mock "github.com/stretchr/testify/mock"
)

// RequestHandler is an autogenerated mock type for the RequestHandler type
type RequestHandler struct {
	mock.Mock
}

type RequestHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *RequestHandler) EXPECT() *RequestHandler_Expecter {
	return &RequestHandler_Expecter{mock: &_m.Mock}
}

// Dispatch provides a mock function with given fields: ctx, request
func (_m *RequestHandler) Dispatch(ctx context.Context, request *bastion.Request) (*funcie.Response, error) {
	ret := _m.Called(ctx, request)

	var r0 *funcie.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bastion.Request) (*funcie.Response, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bastion.Request) *funcie.Response); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*funcie.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bastion.Request) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RequestHandler_Dispatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Dispatch'
type RequestHandler_Dispatch_Call struct {
	*mock.Call
}

// Dispatch is a helper method to define mock.On call
//   - ctx context.Context
//   - request *bastion.Request
func (_e *RequestHandler_Expecter) Dispatch(ctx interface{}, request interface{}) *RequestHandler_Dispatch_Call {
	return &RequestHandler_Dispatch_Call{Call: _e.mock.On("Dispatch", ctx, request)}
}

func (_c *RequestHandler_Dispatch_Call) Run(run func(ctx context.Context, request *bastion.Request)) *RequestHandler_Dispatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*bastion.Request))
	})
	return _c
}

func (_c *RequestHandler_Dispatch_Call) Return(_a0 *funcie.Response, _a1 error) *RequestHandler_Dispatch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RequestHandler_Dispatch_Call) RunAndReturn(run func(context.Context, *bastion.Request) (*funcie.Response, error)) *RequestHandler_Dispatch_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewRequestHandler interface {
	mock.TestingT
	Cleanup(func())
}

// NewRequestHandler creates a new instance of RequestHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRequestHandler(t mockConstructorTestingTNewRequestHandler) *RequestHandler {
	mock := &RequestHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
