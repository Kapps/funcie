// Code generated by mockery v2.33.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// HostTranslator is an autogenerated mock type for the HostTranslator type
type HostTranslator struct {
	mock.Mock
}

type HostTranslator_Expecter struct {
	mock *mock.Mock
}

func (_m *HostTranslator) EXPECT() *HostTranslator_Expecter {
	return &HostTranslator_Expecter{mock: &_m.Mock}
}

// IsHostTranslationRequired provides a mock function with given fields: ctx
func (_m *HostTranslator) IsHostTranslationRequired(ctx context.Context) (bool, error) {
	ret := _m.Called(ctx)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (bool, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HostTranslator_IsHostTranslationRequired_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsHostTranslationRequired'
type HostTranslator_IsHostTranslationRequired_Call struct {
	*mock.Call
}

// IsHostTranslationRequired is a helper method to define mock.On call
//   - ctx context.Context
func (_e *HostTranslator_Expecter) IsHostTranslationRequired(ctx interface{}) *HostTranslator_IsHostTranslationRequired_Call {
	return &HostTranslator_IsHostTranslationRequired_Call{Call: _e.mock.On("IsHostTranslationRequired", ctx)}
}

func (_c *HostTranslator_IsHostTranslationRequired_Call) Run(run func(ctx context.Context)) *HostTranslator_IsHostTranslationRequired_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *HostTranslator_IsHostTranslationRequired_Call) Return(_a0 bool, _a1 error) *HostTranslator_IsHostTranslationRequired_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HostTranslator_IsHostTranslationRequired_Call) RunAndReturn(run func(context.Context) (bool, error)) *HostTranslator_IsHostTranslationRequired_Call {
	_c.Call.Return(run)
	return _c
}

// TranslateLocalHostToResolvedHost provides a mock function with given fields: ctx, host
func (_m *HostTranslator) TranslateLocalHostToResolvedHost(ctx context.Context, host string) (string, error) {
	ret := _m.Called(ctx, host)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, host)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, host)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, host)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HostTranslator_TranslateLocalHostToResolvedHost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TranslateLocalHostToResolvedHost'
type HostTranslator_TranslateLocalHostToResolvedHost_Call struct {
	*mock.Call
}

// TranslateLocalHostToResolvedHost is a helper method to define mock.On call
//   - ctx context.Context
//   - host string
func (_e *HostTranslator_Expecter) TranslateLocalHostToResolvedHost(ctx interface{}, host interface{}) *HostTranslator_TranslateLocalHostToResolvedHost_Call {
	return &HostTranslator_TranslateLocalHostToResolvedHost_Call{Call: _e.mock.On("TranslateLocalHostToResolvedHost", ctx, host)}
}

func (_c *HostTranslator_TranslateLocalHostToResolvedHost_Call) Run(run func(ctx context.Context, host string)) *HostTranslator_TranslateLocalHostToResolvedHost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *HostTranslator_TranslateLocalHostToResolvedHost_Call) Return(_a0 string, _a1 error) *HostTranslator_TranslateLocalHostToResolvedHost_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HostTranslator_TranslateLocalHostToResolvedHost_Call) RunAndReturn(run func(context.Context, string) (string, error)) *HostTranslator_TranslateLocalHostToResolvedHost_Call {
	_c.Call.Return(run)
	return _c
}

// NewHostTranslator creates a new instance of HostTranslator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHostTranslator(t interface {
	mock.TestingT
	Cleanup(func())
}) *HostTranslator {
	mock := &HostTranslator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
