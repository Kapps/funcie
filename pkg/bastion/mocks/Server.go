// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Server is an autogenerated mock type for the Server type
type Server struct {
	mock.Mock
}

type Server_Expecter struct {
	mock *mock.Mock
}

func (_m *Server) EXPECT() *Server_Expecter {
	return &Server_Expecter{mock: &_m.Mock}
}

// Listen provides a mock function with given fields:
func (_m *Server) Listen() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Server_Listen_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Listen'
type Server_Listen_Call struct {
	*mock.Call
}

// Listen is a helper method to define mock.On call
func (_e *Server_Expecter) Listen() *Server_Listen_Call {
	return &Server_Listen_Call{Call: _e.mock.On("Listen")}
}

func (_c *Server_Listen_Call) Run(run func()) *Server_Listen_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Server_Listen_Call) Return(_a0 error) *Server_Listen_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Server_Listen_Call) RunAndReturn(run func() error) *Server_Listen_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewServer creates a new instance of Server. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewServer(t mockConstructorTestingTNewServer) *Server {
	mock := &Server{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
