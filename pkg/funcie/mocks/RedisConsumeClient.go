// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	context "context"

	funcie "github.com/Kapps/funcie/pkg/funcie"
	mock "github.com/stretchr/testify/mock"

	redis "github.com/redis/go-redis/v9"
)

// RedisConsumeClient is an autogenerated mock type for the RedisConsumeClient type
type RedisConsumeClient struct {
	mock.Mock
}

type RedisConsumeClient_Expecter struct {
	mock *mock.Mock
}

func (_m *RedisConsumeClient) EXPECT() *RedisConsumeClient_Expecter {
	return &RedisConsumeClient_Expecter{mock: &_m.Mock}
}

// Publish provides a mock function with given fields: ctx, channel, message
func (_m *RedisConsumeClient) Publish(ctx context.Context, channel string, message interface{}) *redis.IntCmd {
	ret := _m.Called(ctx, channel, message)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) *redis.IntCmd); ok {
		r0 = rf(ctx, channel, message)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// RedisConsumeClient_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type RedisConsumeClient_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - ctx context.Context
//   - channel string
//   - message interface{}
func (_e *RedisConsumeClient_Expecter) Publish(ctx interface{}, channel interface{}, message interface{}) *RedisConsumeClient_Publish_Call {
	return &RedisConsumeClient_Publish_Call{Call: _e.mock.On("Publish", ctx, channel, message)}
}

func (_c *RedisConsumeClient_Publish_Call) Run(run func(ctx context.Context, channel string, message interface{})) *RedisConsumeClient_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *RedisConsumeClient_Publish_Call) Return(_a0 *redis.IntCmd) *RedisConsumeClient_Publish_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RedisConsumeClient_Publish_Call) RunAndReturn(run func(context.Context, string, interface{}) *redis.IntCmd) *RedisConsumeClient_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// RPush provides a mock function with given fields: ctx, key, values
func (_m *RedisConsumeClient) RPush(ctx context.Context, key string, values ...interface{}) *redis.IntCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, values...)
	ret := _m.Called(_ca...)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *redis.IntCmd); ok {
		r0 = rf(ctx, key, values...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// RedisConsumeClient_RPush_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RPush'
type RedisConsumeClient_RPush_Call struct {
	*mock.Call
}

// RPush is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - values ...interface{}
func (_e *RedisConsumeClient_Expecter) RPush(ctx interface{}, key interface{}, values ...interface{}) *RedisConsumeClient_RPush_Call {
	return &RedisConsumeClient_RPush_Call{Call: _e.mock.On("RPush",
		append([]interface{}{ctx, key}, values...)...)}
}

func (_c *RedisConsumeClient_RPush_Call) Run(run func(ctx context.Context, key string, values ...interface{})) *RedisConsumeClient_RPush_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *RedisConsumeClient_RPush_Call) Return(_a0 *redis.IntCmd) *RedisConsumeClient_RPush_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RedisConsumeClient_RPush_Call) RunAndReturn(run func(context.Context, string, ...interface{}) *redis.IntCmd) *RedisConsumeClient_RPush_Call {
	_c.Call.Return(run)
	return _c
}

// Subscribe provides a mock function with given fields: ctx, channels
func (_m *RedisConsumeClient) Subscribe(ctx context.Context, channels ...string) funcie.RedisPubSub {
	_va := make([]interface{}, len(channels))
	for _i := range channels {
		_va[_i] = channels[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 funcie.RedisPubSub
	if rf, ok := ret.Get(0).(func(context.Context, ...string) funcie.RedisPubSub); ok {
		r0 = rf(ctx, channels...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(funcie.RedisPubSub)
		}
	}

	return r0
}

// RedisConsumeClient_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type RedisConsumeClient_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - ctx context.Context
//   - channels ...string
func (_e *RedisConsumeClient_Expecter) Subscribe(ctx interface{}, channels ...interface{}) *RedisConsumeClient_Subscribe_Call {
	return &RedisConsumeClient_Subscribe_Call{Call: _e.mock.On("Subscribe",
		append([]interface{}{ctx}, channels...)...)}
}

func (_c *RedisConsumeClient_Subscribe_Call) Run(run func(ctx context.Context, channels ...string)) *RedisConsumeClient_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *RedisConsumeClient_Subscribe_Call) Return(_a0 funcie.RedisPubSub) *RedisConsumeClient_Subscribe_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RedisConsumeClient_Subscribe_Call) RunAndReturn(run func(context.Context, ...string) funcie.RedisPubSub) *RedisConsumeClient_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewRedisConsumeClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewRedisConsumeClient creates a new instance of RedisConsumeClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRedisConsumeClient(t mockConstructorTestingTNewRedisConsumeClient) *RedisConsumeClient {
	mock := &RedisConsumeClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
