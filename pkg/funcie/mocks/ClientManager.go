// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	context "context"

	publisher "github.com/Kapps/funcie/pkg/funcie/transports/websocket/publisher"
	mock "github.com/stretchr/testify/mock"
)

// ClientManager is an autogenerated mock type for the ClientManager type
type ClientManager struct {
	mock.Mock
}

type ClientManager_Expecter struct {
	mock *mock.Mock
}

func (_m *ClientManager) EXPECT() *ClientManager_Expecter {
	return &ClientManager_Expecter{mock: &_m.Mock}
}

// AddClient provides a mock function with given fields: conn
func (_m *ClientManager) AddClient(conn publisher.Client) {
	_m.Called(conn)
}

// ClientManager_AddClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddClient'
type ClientManager_AddClient_Call struct {
	*mock.Call
}

// AddClient is a helper method to define mock.On call
//   - conn publisher.Client
func (_e *ClientManager_Expecter) AddClient(conn interface{}) *ClientManager_AddClient_Call {
	return &ClientManager_AddClient_Call{Call: _e.mock.On("AddClient", conn)}
}

func (_c *ClientManager_AddClient_Call) Run(run func(conn publisher.Client)) *ClientManager_AddClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(publisher.Client))
	})
	return _c
}

func (_c *ClientManager_AddClient_Call) Return() *ClientManager_AddClient_Call {
	_c.Call.Return()
	return _c
}

func (_c *ClientManager_AddClient_Call) RunAndReturn(run func(publisher.Client)) *ClientManager_AddClient_Call {
	_c.Call.Return(run)
	return _c
}

// AddClientRouting provides a mock function with given fields: id, conn
func (_m *ClientManager) AddClientRouting(id string, conn publisher.Client) {
	_m.Called(id, conn)
}

// ClientManager_AddClientRouting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddClientRouting'
type ClientManager_AddClientRouting_Call struct {
	*mock.Call
}

// AddClientRouting is a helper method to define mock.On call
//   - id string
//   - conn publisher.Client
func (_e *ClientManager_Expecter) AddClientRouting(id interface{}, conn interface{}) *ClientManager_AddClientRouting_Call {
	return &ClientManager_AddClientRouting_Call{Call: _e.mock.On("AddClientRouting", id, conn)}
}

func (_c *ClientManager_AddClientRouting_Call) Run(run func(id string, conn publisher.Client)) *ClientManager_AddClientRouting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(publisher.Client))
	})
	return _c
}

func (_c *ClientManager_AddClientRouting_Call) Return() *ClientManager_AddClientRouting_Call {
	_c.Call.Return()
	return _c
}

func (_c *ClientManager_AddClientRouting_Call) RunAndReturn(run func(string, publisher.Client)) *ClientManager_AddClientRouting_Call {
	_c.Call.Return(run)
	return _c
}

// CloseAllClients provides a mock function with given fields:
func (_m *ClientManager) CloseAllClients() {
	_m.Called()
}

// ClientManager_CloseAllClients_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CloseAllClients'
type ClientManager_CloseAllClients_Call struct {
	*mock.Call
}

// CloseAllClients is a helper method to define mock.On call
func (_e *ClientManager_Expecter) CloseAllClients() *ClientManager_CloseAllClients_Call {
	return &ClientManager_CloseAllClients_Call{Call: _e.mock.On("CloseAllClients")}
}

func (_c *ClientManager_CloseAllClients_Call) Run(run func()) *ClientManager_CloseAllClients_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ClientManager_CloseAllClients_Call) Return() *ClientManager_CloseAllClients_Call {
	_c.Call.Return()
	return _c
}

func (_c *ClientManager_CloseAllClients_Call) RunAndReturn(run func()) *ClientManager_CloseAllClients_Call {
	_c.Call.Return(run)
	return _c
}

// GetClientRouting provides a mock function with given fields: id
func (_m *ClientManager) GetClientRouting(id string) (publisher.Client, error) {
	ret := _m.Called(id)

	var r0 publisher.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (publisher.Client, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) publisher.Client); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(publisher.Client)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientManager_GetClientRouting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClientRouting'
type ClientManager_GetClientRouting_Call struct {
	*mock.Call
}

// GetClientRouting is a helper method to define mock.On call
//   - id string
func (_e *ClientManager_Expecter) GetClientRouting(id interface{}) *ClientManager_GetClientRouting_Call {
	return &ClientManager_GetClientRouting_Call{Call: _e.mock.On("GetClientRouting", id)}
}

func (_c *ClientManager_GetClientRouting_Call) Run(run func(id string)) *ClientManager_GetClientRouting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ClientManager_GetClientRouting_Call) Return(_a0 publisher.Client, _a1 error) *ClientManager_GetClientRouting_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientManager_GetClientRouting_Call) RunAndReturn(run func(string) (publisher.Client, error)) *ClientManager_GetClientRouting_Call {
	_c.Call.Return(run)
	return _c
}

// Process provides a mock function with given fields: ctx, conn
func (_m *ClientManager) Process(ctx context.Context, conn publisher.Websocket) {
	_m.Called(ctx, conn)
}

// ClientManager_Process_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Process'
type ClientManager_Process_Call struct {
	*mock.Call
}

// Process is a helper method to define mock.On call
//   - ctx context.Context
//   - conn publisher.Websocket
func (_e *ClientManager_Expecter) Process(ctx interface{}, conn interface{}) *ClientManager_Process_Call {
	return &ClientManager_Process_Call{Call: _e.mock.On("Process", ctx, conn)}
}

func (_c *ClientManager_Process_Call) Run(run func(ctx context.Context, conn publisher.Websocket)) *ClientManager_Process_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(publisher.Websocket))
	})
	return _c
}

func (_c *ClientManager_Process_Call) Return() *ClientManager_Process_Call {
	_c.Call.Return()
	return _c
}

func (_c *ClientManager_Process_Call) RunAndReturn(run func(context.Context, publisher.Websocket)) *ClientManager_Process_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveClientRouting provides a mock function with given fields: id
func (_m *ClientManager) RemoveClientRouting(id string) {
	_m.Called(id)
}

// ClientManager_RemoveClientRouting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveClientRouting'
type ClientManager_RemoveClientRouting_Call struct {
	*mock.Call
}

// RemoveClientRouting is a helper method to define mock.On call
//   - id string
func (_e *ClientManager_Expecter) RemoveClientRouting(id interface{}) *ClientManager_RemoveClientRouting_Call {
	return &ClientManager_RemoveClientRouting_Call{Call: _e.mock.On("RemoveClientRouting", id)}
}

func (_c *ClientManager_RemoveClientRouting_Call) Run(run func(id string)) *ClientManager_RemoveClientRouting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ClientManager_RemoveClientRouting_Call) Return() *ClientManager_RemoveClientRouting_Call {
	_c.Call.Return()
	return _c
}

func (_c *ClientManager_RemoveClientRouting_Call) RunAndReturn(run func(string)) *ClientManager_RemoveClientRouting_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewClientManager interface {
	mock.TestingT
	Cleanup(func())
}

// NewClientManager creates a new instance of ClientManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClientManager(t mockConstructorTestingTNewClientManager) *ClientManager {
	mock := &ClientManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
