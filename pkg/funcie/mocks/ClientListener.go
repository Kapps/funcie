// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// ClientListener is an autogenerated mock type for the ClientListener type
type ClientListener struct {
	mock.Mock
}

type ClientListener_Expecter struct {
	mock *mock.Mock
}

func (_m *ClientListener) EXPECT() *ClientListener_Expecter {
	return &ClientListener_Expecter{mock: &_m.Mock}
}

// ServeHTTP provides a mock function with given fields: w, r
func (_m *ClientListener) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	_m.Called(w, r)
}

// ClientListener_ServeHTTP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServeHTTP'
type ClientListener_ServeHTTP_Call struct {
	*mock.Call
}

// ServeHTTP is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
func (_e *ClientListener_Expecter) ServeHTTP(w interface{}, r interface{}) *ClientListener_ServeHTTP_Call {
	return &ClientListener_ServeHTTP_Call{Call: _e.mock.On("ServeHTTP", w, r)}
}

func (_c *ClientListener_ServeHTTP_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *ClientListener_ServeHTTP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *ClientListener_ServeHTTP_Call) Return() *ClientListener_ServeHTTP_Call {
	_c.Call.Return()
	return _c
}

func (_c *ClientListener_ServeHTTP_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request)) *ClientListener_ServeHTTP_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewClientListener interface {
	mock.TestingT
	Cleanup(func())
}

// NewClientListener creates a new instance of ClientListener. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClientListener(t mockConstructorTestingTNewClientListener) *ClientListener {
	mock := &ClientListener{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
