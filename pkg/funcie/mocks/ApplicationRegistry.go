// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	context "context"

	funcie "github.com/Kapps/funcie/pkg/funcie"
	mock "github.com/stretchr/testify/mock"
)

// ApplicationRegistry is an autogenerated mock type for the ApplicationRegistry type
type ApplicationRegistry struct {
	mock.Mock
}

type ApplicationRegistry_Expecter struct {
	mock *mock.Mock
}

func (_m *ApplicationRegistry) EXPECT() *ApplicationRegistry_Expecter {
	return &ApplicationRegistry_Expecter{mock: &_m.Mock}
}

// GetApplication provides a mock function with given fields: ctx, applicationName
func (_m *ApplicationRegistry) GetApplication(ctx context.Context, applicationName string) (*funcie.Application, error) {
	ret := _m.Called(ctx, applicationName)

	var r0 *funcie.Application
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*funcie.Application, error)); ok {
		return rf(ctx, applicationName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *funcie.Application); ok {
		r0 = rf(ctx, applicationName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*funcie.Application)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, applicationName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ApplicationRegistry_GetApplication_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetApplication'
type ApplicationRegistry_GetApplication_Call struct {
	*mock.Call
}

// GetApplication is a helper method to define mock.On call
//   - ctx context.Context
//   - applicationName string
func (_e *ApplicationRegistry_Expecter) GetApplication(ctx interface{}, applicationName interface{}) *ApplicationRegistry_GetApplication_Call {
	return &ApplicationRegistry_GetApplication_Call{Call: _e.mock.On("GetApplication", ctx, applicationName)}
}

func (_c *ApplicationRegistry_GetApplication_Call) Run(run func(ctx context.Context, applicationName string)) *ApplicationRegistry_GetApplication_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ApplicationRegistry_GetApplication_Call) Return(_a0 *funcie.Application, _a1 error) *ApplicationRegistry_GetApplication_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ApplicationRegistry_GetApplication_Call) RunAndReturn(run func(context.Context, string) (*funcie.Application, error)) *ApplicationRegistry_GetApplication_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: ctx, application
func (_m *ApplicationRegistry) Register(ctx context.Context, application *funcie.Application) error {
	ret := _m.Called(ctx, application)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *funcie.Application) error); ok {
		r0 = rf(ctx, application)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ApplicationRegistry_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type ApplicationRegistry_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - ctx context.Context
//   - application *funcie.Application
func (_e *ApplicationRegistry_Expecter) Register(ctx interface{}, application interface{}) *ApplicationRegistry_Register_Call {
	return &ApplicationRegistry_Register_Call{Call: _e.mock.On("Register", ctx, application)}
}

func (_c *ApplicationRegistry_Register_Call) Run(run func(ctx context.Context, application *funcie.Application)) *ApplicationRegistry_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*funcie.Application))
	})
	return _c
}

func (_c *ApplicationRegistry_Register_Call) Return(_a0 error) *ApplicationRegistry_Register_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ApplicationRegistry_Register_Call) RunAndReturn(run func(context.Context, *funcie.Application) error) *ApplicationRegistry_Register_Call {
	_c.Call.Return(run)
	return _c
}

// Unregister provides a mock function with given fields: ctx, applicationName
func (_m *ApplicationRegistry) Unregister(ctx context.Context, applicationName string) error {
	ret := _m.Called(ctx, applicationName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, applicationName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ApplicationRegistry_Unregister_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unregister'
type ApplicationRegistry_Unregister_Call struct {
	*mock.Call
}

// Unregister is a helper method to define mock.On call
//   - ctx context.Context
//   - applicationName string
func (_e *ApplicationRegistry_Expecter) Unregister(ctx interface{}, applicationName interface{}) *ApplicationRegistry_Unregister_Call {
	return &ApplicationRegistry_Unregister_Call{Call: _e.mock.On("Unregister", ctx, applicationName)}
}

func (_c *ApplicationRegistry_Unregister_Call) Run(run func(ctx context.Context, applicationName string)) *ApplicationRegistry_Unregister_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ApplicationRegistry_Unregister_Call) Return(_a0 error) *ApplicationRegistry_Unregister_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ApplicationRegistry_Unregister_Call) RunAndReturn(run func(context.Context, string) error) *ApplicationRegistry_Unregister_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewApplicationRegistry interface {
	mock.TestingT
	Cleanup(func())
}

// NewApplicationRegistry creates a new instance of ApplicationRegistry. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewApplicationRegistry(t mockConstructorTestingTNewApplicationRegistry) *ApplicationRegistry {
	mock := &ApplicationRegistry{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
