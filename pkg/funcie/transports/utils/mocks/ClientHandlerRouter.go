// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	context "context"

	funcie "github.com/Kapps/funcie/pkg/funcie"
	mock "github.com/stretchr/testify/mock"
)

// ClientHandlerRouter is an autogenerated mock type for the ClientHandlerRouter type
type ClientHandlerRouter struct {
	mock.Mock
}

type ClientHandlerRouter_Expecter struct {
	mock *mock.Mock
}

func (_m *ClientHandlerRouter) EXPECT() *ClientHandlerRouter_Expecter {
	return &ClientHandlerRouter_Expecter{mock: &_m.Mock}
}

// AddClientHandler provides a mock function with given fields: applicationId, handler
func (_m *ClientHandlerRouter) AddClientHandler(applicationId string, handler funcie.Handler) error {
	ret := _m.Called(applicationId, handler)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, funcie.Handler) error); ok {
		r0 = rf(applicationId, handler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientHandlerRouter_AddClientHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddClientHandler'
type ClientHandlerRouter_AddClientHandler_Call struct {
	*mock.Call
}

// AddClientHandler is a helper method to define mock.On call
//   - applicationId string
//   - handler funcie.Handler
func (_e *ClientHandlerRouter_Expecter) AddClientHandler(applicationId interface{}, handler interface{}) *ClientHandlerRouter_AddClientHandler_Call {
	return &ClientHandlerRouter_AddClientHandler_Call{Call: _e.mock.On("AddClientHandler", applicationId, handler)}
}

func (_c *ClientHandlerRouter_AddClientHandler_Call) Run(run func(applicationId string, handler funcie.Handler)) *ClientHandlerRouter_AddClientHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(funcie.Handler))
	})
	return _c
}

func (_c *ClientHandlerRouter_AddClientHandler_Call) Return(_a0 error) *ClientHandlerRouter_AddClientHandler_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientHandlerRouter_AddClientHandler_Call) RunAndReturn(run func(string, funcie.Handler) error) *ClientHandlerRouter_AddClientHandler_Call {
	_c.Call.Return(run)
	return _c
}

// Handle provides a mock function with given fields: ctx, message
func (_m *ClientHandlerRouter) Handle(ctx context.Context, message *funcie.Message) (*funcie.Response, error) {
	ret := _m.Called(ctx, message)

	var r0 *funcie.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *funcie.Message) (*funcie.Response, error)); ok {
		return rf(ctx, message)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *funcie.Message) *funcie.Response); ok {
		r0 = rf(ctx, message)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*funcie.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *funcie.Message) error); ok {
		r1 = rf(ctx, message)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientHandlerRouter_Handle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handle'
type ClientHandlerRouter_Handle_Call struct {
	*mock.Call
}

// Handle is a helper method to define mock.On call
//   - ctx context.Context
//   - message *funcie.Message
func (_e *ClientHandlerRouter_Expecter) Handle(ctx interface{}, message interface{}) *ClientHandlerRouter_Handle_Call {
	return &ClientHandlerRouter_Handle_Call{Call: _e.mock.On("Handle", ctx, message)}
}

func (_c *ClientHandlerRouter_Handle_Call) Run(run func(ctx context.Context, message *funcie.Message)) *ClientHandlerRouter_Handle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*funcie.Message))
	})
	return _c
}

func (_c *ClientHandlerRouter_Handle_Call) Return(_a0 *funcie.Response, _a1 error) *ClientHandlerRouter_Handle_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientHandlerRouter_Handle_Call) RunAndReturn(run func(context.Context, *funcie.Message) (*funcie.Response, error)) *ClientHandlerRouter_Handle_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveClientHandler provides a mock function with given fields: applicationId
func (_m *ClientHandlerRouter) RemoveClientHandler(applicationId string) error {
	ret := _m.Called(applicationId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(applicationId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientHandlerRouter_RemoveClientHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveClientHandler'
type ClientHandlerRouter_RemoveClientHandler_Call struct {
	*mock.Call
}

// RemoveClientHandler is a helper method to define mock.On call
//   - applicationId string
func (_e *ClientHandlerRouter_Expecter) RemoveClientHandler(applicationId interface{}) *ClientHandlerRouter_RemoveClientHandler_Call {
	return &ClientHandlerRouter_RemoveClientHandler_Call{Call: _e.mock.On("RemoveClientHandler", applicationId)}
}

func (_c *ClientHandlerRouter_RemoveClientHandler_Call) Run(run func(applicationId string)) *ClientHandlerRouter_RemoveClientHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ClientHandlerRouter_RemoveClientHandler_Call) Return(_a0 error) *ClientHandlerRouter_RemoveClientHandler_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientHandlerRouter_RemoveClientHandler_Call) RunAndReturn(run func(string) error) *ClientHandlerRouter_RemoveClientHandler_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewClientHandlerRouter interface {
	mock.TestingT
	Cleanup(func())
}

// NewClientHandlerRouter creates a new instance of ClientHandlerRouter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClientHandlerRouter(t mockConstructorTestingTNewClientHandlerRouter) *ClientHandlerRouter {
	mock := &ClientHandlerRouter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
