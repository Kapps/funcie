// Code generated by mockery v2.21.1. DO NOT EDIT.

package mocks

import (
	context "context"

	funcie "github.com/Kapps/funcie/pkg/funcie"
	mock "github.com/stretchr/testify/mock"
)

// HandlerRouter is an autogenerated mock type for the HandlerRouter type
type HandlerRouter struct {
	mock.Mock
}

type HandlerRouter_Expecter struct {
	mock *mock.Mock
}

func (_m *HandlerRouter) EXPECT() *HandlerRouter_Expecter {
	return &HandlerRouter_Expecter{mock: &_m.Mock}
}

// AddHandler provides a mock function with given fields: handlerType, handler
func (_m *HandlerRouter) AddClientHandler(handlerType string, handler funcie.Handler) error {
	ret := _m.Called(handlerType, handler)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, funcie.Handler) error); ok {
		r0 = rf(handlerType, handler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HandlerRouter_AddHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddClientHandler'
type HandlerRouter_AddHandler_Call struct {
	*mock.Call
}

// AddHandler is a helper method to define mock.On call
//   - handlerType string
//   - handler funcie.Handler
func (_e *HandlerRouter_Expecter) AddHandler(handlerType interface{}, handler interface{}) *HandlerRouter_AddHandler_Call {
	return &HandlerRouter_AddHandler_Call{Call: _e.mock.On("AddClientHandler", handlerType, handler)}
}

func (_c *HandlerRouter_AddHandler_Call) Run(run func(handlerType string, handler funcie.Handler)) *HandlerRouter_AddHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(funcie.Handler))
	})
	return _c
}

func (_c *HandlerRouter_AddHandler_Call) Return(_a0 error) *HandlerRouter_AddHandler_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HandlerRouter_AddHandler_Call) RunAndReturn(run func(string, funcie.Handler) error) *HandlerRouter_AddHandler_Call {
	_c.Call.Return(run)
	return _c
}

// Handle provides a mock function with given fields: ctx, message
func (_m *HandlerRouter) Handle(ctx context.Context, message *funcie.Message) (*funcie.Response, error) {
	ret := _m.Called(ctx, message)

	var r0 *funcie.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *funcie.Message) (*funcie.Response, error)); ok {
		return rf(ctx, message)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *funcie.Message) *funcie.Response); ok {
		r0 = rf(ctx, message)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*funcie.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *funcie.Message) error); ok {
		r1 = rf(ctx, message)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HandlerRouter_Handle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handle'
type HandlerRouter_Handle_Call struct {
	*mock.Call
}

// Handle is a helper method to define mock.On call
//   - ctx context.Context
//   - message *funcie.Message
func (_e *HandlerRouter_Expecter) Handle(ctx interface{}, message interface{}) *HandlerRouter_Handle_Call {
	return &HandlerRouter_Handle_Call{Call: _e.mock.On("Handle", ctx, message)}
}

func (_c *HandlerRouter_Handle_Call) Run(run func(ctx context.Context, message *funcie.Message)) *HandlerRouter_Handle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*funcie.Message))
	})
	return _c
}

func (_c *HandlerRouter_Handle_Call) Return(_a0 *funcie.Response, _a1 error) *HandlerRouter_Handle_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HandlerRouter_Handle_Call) RunAndReturn(run func(context.Context, *funcie.Message) (*funcie.Response, error)) *HandlerRouter_Handle_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveHandler provides a mock function with given fields: handlerType
func (_m *HandlerRouter) RemoveClientHandler(handlerType string) error {
	ret := _m.Called(handlerType)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(handlerType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HandlerRouter_RemoveHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveClientHandler'
type HandlerRouter_RemoveHandler_Call struct {
	*mock.Call
}

// RemoveHandler is a helper method to define mock.On call
//   - handlerType string
func (_e *HandlerRouter_Expecter) RemoveHandler(handlerType interface{}) *HandlerRouter_RemoveHandler_Call {
	return &HandlerRouter_RemoveHandler_Call{Call: _e.mock.On("RemoveClientHandler", handlerType)}
}

func (_c *HandlerRouter_RemoveHandler_Call) Run(run func(handlerType string)) *HandlerRouter_RemoveHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *HandlerRouter_RemoveHandler_Call) Return(_a0 error) *HandlerRouter_RemoveHandler_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HandlerRouter_RemoveHandler_Call) RunAndReturn(run func(string) error) *HandlerRouter_RemoveHandler_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewHandlerRouter interface {
	mock.TestingT
	Cleanup(func())
}

// NewHandlerRouter creates a new instance of HandlerRouter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewHandlerRouter(t mockConstructorTestingTNewHandlerRouter) *HandlerRouter {
	mock := &HandlerRouter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
