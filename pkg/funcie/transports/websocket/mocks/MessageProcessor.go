// Code generated by mockery v2.33.1. DO NOT EDIT.

package mocks

import (
	context "context"
	json "encoding/json"

	funcie "github.com/Kapps/funcie/pkg/funcie"

	mock "github.com/stretchr/testify/mock"

	websocket "github.com/Kapps/funcie/pkg/funcie/transports/websocket"
)

// MessageProcessor is an autogenerated mock type for the MessageProcessor type
type MessageProcessor struct {
	mock.Mock
}

type MessageProcessor_Expecter struct {
	mock *mock.Mock
}

func (_m *MessageProcessor) EXPECT() *MessageProcessor_Expecter {
	return &MessageProcessor_Expecter{mock: &_m.Mock}
}

// ProcessMessage provides a mock function with given fields: ctx, conn, msg
func (_m *MessageProcessor) ProcessMessage(ctx context.Context, conn websocket.Connection, msg *funcie.MessageBase[json.RawMessage]) (*funcie.ResponseBase[json.RawMessage], error) {
	ret := _m.Called(ctx, conn, msg)

	var r0 *funcie.ResponseBase[json.RawMessage]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, websocket.Connection, *funcie.MessageBase[json.RawMessage]) (*funcie.ResponseBase[json.RawMessage], error)); ok {
		return rf(ctx, conn, msg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, websocket.Connection, *funcie.MessageBase[json.RawMessage]) *funcie.ResponseBase[json.RawMessage]); ok {
		r0 = rf(ctx, conn, msg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*funcie.ResponseBase[json.RawMessage])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, websocket.Connection, *funcie.MessageBase[json.RawMessage]) error); ok {
		r1 = rf(ctx, conn, msg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MessageProcessor_ProcessMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessMessage'
type MessageProcessor_ProcessMessage_Call struct {
	*mock.Call
}

// ProcessMessage is a helper method to define mock.On call
//   - ctx context.Context
//   - conn websocket.Connection
//   - msg *funcie.MessageBase[json.RawMessage]
func (_e *MessageProcessor_Expecter) ProcessMessage(ctx interface{}, conn interface{}, msg interface{}) *MessageProcessor_ProcessMessage_Call {
	return &MessageProcessor_ProcessMessage_Call{Call: _e.mock.On("ProcessMessage", ctx, conn, msg)}
}

func (_c *MessageProcessor_ProcessMessage_Call) Run(run func(ctx context.Context, conn websocket.Connection, msg *funcie.MessageBase[json.RawMessage])) *MessageProcessor_ProcessMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(websocket.Connection), args[2].(*funcie.MessageBase[json.RawMessage]))
	})
	return _c
}

func (_c *MessageProcessor_ProcessMessage_Call) Return(_a0 *funcie.ResponseBase[json.RawMessage], _a1 error) *MessageProcessor_ProcessMessage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MessageProcessor_ProcessMessage_Call) RunAndReturn(run func(context.Context, websocket.Connection, *funcie.MessageBase[json.RawMessage]) (*funcie.ResponseBase[json.RawMessage], error)) *MessageProcessor_ProcessMessage_Call {
	_c.Call.Return(run)
	return _c
}

// NewMessageProcessor creates a new instance of MessageProcessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMessageProcessor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MessageProcessor {
	mock := &MessageProcessor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
