// Code generated by mockery v2.33.1. DO NOT EDIT.

package mocks

import (
	context "context"
	json "encoding/json"

	funcie "github.com/Kapps/funcie/pkg/funcie"

	mock "github.com/stretchr/testify/mock"

	websocket "github.com/Kapps/funcie/pkg/funcie/transports/websocket"
)

// Exchange is an autogenerated mock type for the Exchange type
type Exchange struct {
	mock.Mock
}

type Exchange_Expecter struct {
	mock *mock.Mock
}

func (_m *Exchange) EXPECT() *Exchange_Expecter {
	return &Exchange_Expecter{mock: &_m.Mock}
}

// RegisterConnection provides a mock function with given fields: ctx, conn
func (_m *Exchange) RegisterConnection(ctx context.Context, conn websocket.Connection) error {
	ret := _m.Called(ctx, conn)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, websocket.Connection) error); ok {
		r0 = rf(ctx, conn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Exchange_RegisterConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterConnection'
type Exchange_RegisterConnection_Call struct {
	*mock.Call
}

// RegisterConnection is a helper method to define mock.On call
//   - ctx context.Context
//   - conn websocket.Connection
func (_e *Exchange_Expecter) RegisterConnection(ctx interface{}, conn interface{}) *Exchange_RegisterConnection_Call {
	return &Exchange_RegisterConnection_Call{Call: _e.mock.On("RegisterConnection", ctx, conn)}
}

func (_c *Exchange_RegisterConnection_Call) Run(run func(ctx context.Context, conn websocket.Connection)) *Exchange_RegisterConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(websocket.Connection))
	})
	return _c
}

func (_c *Exchange_RegisterConnection_Call) Return(_a0 error) *Exchange_RegisterConnection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Exchange_RegisterConnection_Call) RunAndReturn(run func(context.Context, websocket.Connection) error) *Exchange_RegisterConnection_Call {
	_c.Call.Return(run)
	return _c
}

// Send provides a mock function with given fields: ctx, conn, message
func (_m *Exchange) Send(ctx context.Context, conn websocket.Connection, message *funcie.MessageBase[json.RawMessage]) (*funcie.ResponseBase[json.RawMessage], error) {
	ret := _m.Called(ctx, conn, message)

	var r0 *funcie.ResponseBase[json.RawMessage]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, websocket.Connection, *funcie.MessageBase[json.RawMessage]) (*funcie.ResponseBase[json.RawMessage], error)); ok {
		return rf(ctx, conn, message)
	}
	if rf, ok := ret.Get(0).(func(context.Context, websocket.Connection, *funcie.MessageBase[json.RawMessage]) *funcie.ResponseBase[json.RawMessage]); ok {
		r0 = rf(ctx, conn, message)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*funcie.ResponseBase[json.RawMessage])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, websocket.Connection, *funcie.MessageBase[json.RawMessage]) error); ok {
		r1 = rf(ctx, conn, message)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Exchange_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type Exchange_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - ctx context.Context
//   - conn websocket.Connection
//   - message *funcie.MessageBase[json.RawMessage]
func (_e *Exchange_Expecter) Send(ctx interface{}, conn interface{}, message interface{}) *Exchange_Send_Call {
	return &Exchange_Send_Call{Call: _e.mock.On("Send", ctx, conn, message)}
}

func (_c *Exchange_Send_Call) Run(run func(ctx context.Context, conn websocket.Connection, message *funcie.MessageBase[json.RawMessage])) *Exchange_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(websocket.Connection), args[2].(*funcie.MessageBase[json.RawMessage]))
	})
	return _c
}

func (_c *Exchange_Send_Call) Return(_a0 *funcie.ResponseBase[json.RawMessage], _a1 error) *Exchange_Send_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Exchange_Send_Call) RunAndReturn(run func(context.Context, websocket.Connection, *funcie.MessageBase[json.RawMessage]) (*funcie.ResponseBase[json.RawMessage], error)) *Exchange_Send_Call {
	_c.Call.Return(run)
	return _c
}

// NewExchange creates a new instance of Exchange. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExchange(t interface {
	mock.TestingT
	Cleanup(func())
}) *Exchange {
	mock := &Exchange{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
