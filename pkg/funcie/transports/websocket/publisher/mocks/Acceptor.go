// Code generated by mockery v2.33.1. DO NOT EDIT.

package mocks

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"

	publisher "github.com/Kapps/funcie/pkg/funcie/transports/websocket/publisher"
)

// Acceptor is an autogenerated mock type for the Acceptor type
type Acceptor struct {
	mock.Mock
}

type Acceptor_Expecter struct {
	mock *mock.Mock
}

func (_m *Acceptor) EXPECT() *Acceptor_Expecter {
	return &Acceptor_Expecter{mock: &_m.Mock}
}

// Accept provides a mock function with given fields: ctx, rw, req
func (_m *Acceptor) Accept(ctx context.Context, rw http.ResponseWriter, req *http.Request) (publisher.ClientConnection, error) {
	ret := _m.Called(ctx, rw, req)

	var r0 publisher.ClientConnection
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, http.ResponseWriter, *http.Request) (publisher.ClientConnection, error)); ok {
		return rf(ctx, rw, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, http.ResponseWriter, *http.Request) publisher.ClientConnection); ok {
		r0 = rf(ctx, rw, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(publisher.ClientConnection)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, http.ResponseWriter, *http.Request) error); ok {
		r1 = rf(ctx, rw, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Acceptor_Accept_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Accept'
type Acceptor_Accept_Call struct {
	*mock.Call
}

// Accept is a helper method to define mock.On call
//   - ctx context.Context
//   - rw http.ResponseWriter
//   - req *http.Request
func (_e *Acceptor_Expecter) Accept(ctx interface{}, rw interface{}, req interface{}) *Acceptor_Accept_Call {
	return &Acceptor_Accept_Call{Call: _e.mock.On("Accept", ctx, rw, req)}
}

func (_c *Acceptor_Accept_Call) Run(run func(ctx context.Context, rw http.ResponseWriter, req *http.Request)) *Acceptor_Accept_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(http.ResponseWriter), args[2].(*http.Request))
	})
	return _c
}

func (_c *Acceptor_Accept_Call) Return(_a0 publisher.ClientConnection, _a1 error) *Acceptor_Accept_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Acceptor_Accept_Call) RunAndReturn(run func(context.Context, http.ResponseWriter, *http.Request) (publisher.ClientConnection, error)) *Acceptor_Accept_Call {
	_c.Call.Return(run)
	return _c
}

// NewAcceptor creates a new instance of Acceptor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAcceptor(t interface {
	mock.TestingT
	Cleanup(func())
}) *Acceptor {
	mock := &Acceptor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
