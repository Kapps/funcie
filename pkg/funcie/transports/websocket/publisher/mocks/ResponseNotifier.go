// Code generated by mockery v2.33.1. DO NOT EDIT.

package mocks

import (
	context "context"
	json "encoding/json"

	funcie "github.com/Kapps/funcie/pkg/funcie"

	mock "github.com/stretchr/testify/mock"
)

// ResponseNotifier is an autogenerated mock type for the ResponseNotifier type
type ResponseNotifier struct {
	mock.Mock
}

type ResponseNotifier_Expecter struct {
	mock *mock.Mock
}

func (_m *ResponseNotifier) EXPECT() *ResponseNotifier_Expecter {
	return &ResponseNotifier_Expecter{mock: &_m.Mock}
}

// Notify provides a mock function with given fields: ctx, resp
func (_m *ResponseNotifier) Notify(ctx context.Context, resp *funcie.ResponseBase[json.RawMessage]) {
	_m.Called(ctx, resp)
}

// ResponseNotifier_Notify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Notify'
type ResponseNotifier_Notify_Call struct {
	*mock.Call
}

// Notify is a helper method to define mock.On call
//   - ctx context.Context
//   - resp *funcie.ResponseBase[json.RawMessage]
func (_e *ResponseNotifier_Expecter) Notify(ctx interface{}, resp interface{}) *ResponseNotifier_Notify_Call {
	return &ResponseNotifier_Notify_Call{Call: _e.mock.On("Notify", ctx, resp)}
}

func (_c *ResponseNotifier_Notify_Call) Run(run func(ctx context.Context, resp *funcie.ResponseBase[json.RawMessage])) *ResponseNotifier_Notify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*funcie.ResponseBase[json.RawMessage]))
	})
	return _c
}

func (_c *ResponseNotifier_Notify_Call) Return() *ResponseNotifier_Notify_Call {
	_c.Call.Return()
	return _c
}

func (_c *ResponseNotifier_Notify_Call) RunAndReturn(run func(context.Context, *funcie.ResponseBase[json.RawMessage])) *ResponseNotifier_Notify_Call {
	_c.Call.Return(run)
	return _c
}

// WaitForResponse provides a mock function with given fields: ctx, messageId
func (_m *ResponseNotifier) WaitForResponse(ctx context.Context, messageId string) (*funcie.ResponseBase[json.RawMessage], error) {
	ret := _m.Called(ctx, messageId)

	var r0 *funcie.ResponseBase[json.RawMessage]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*funcie.ResponseBase[json.RawMessage], error)); ok {
		return rf(ctx, messageId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *funcie.ResponseBase[json.RawMessage]); ok {
		r0 = rf(ctx, messageId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*funcie.ResponseBase[json.RawMessage])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, messageId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResponseNotifier_WaitForResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitForResponse'
type ResponseNotifier_WaitForResponse_Call struct {
	*mock.Call
}

// WaitForResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - messageId string
func (_e *ResponseNotifier_Expecter) WaitForResponse(ctx interface{}, messageId interface{}) *ResponseNotifier_WaitForResponse_Call {
	return &ResponseNotifier_WaitForResponse_Call{Call: _e.mock.On("WaitForResponse", ctx, messageId)}
}

func (_c *ResponseNotifier_WaitForResponse_Call) Run(run func(ctx context.Context, messageId string)) *ResponseNotifier_WaitForResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ResponseNotifier_WaitForResponse_Call) Return(_a0 *funcie.ResponseBase[json.RawMessage], _a1 error) *ResponseNotifier_WaitForResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ResponseNotifier_WaitForResponse_Call) RunAndReturn(run func(context.Context, string) (*funcie.ResponseBase[json.RawMessage], error)) *ResponseNotifier_WaitForResponse_Call {
	_c.Call.Return(run)
	return _c
}

// NewResponseNotifier creates a new instance of ResponseNotifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewResponseNotifier(t interface {
	mock.TestingT
	Cleanup(func())
}) *ResponseNotifier {
	mock := &ResponseNotifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
