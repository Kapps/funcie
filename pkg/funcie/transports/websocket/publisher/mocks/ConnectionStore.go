// Code generated by mockery v2.33.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	websocket "github.com/Kapps/funcie/pkg/funcie/transports/websocket"
)

// ConnectionStore is an autogenerated mock type for the ConnectionStore type
type ConnectionStore struct {
	mock.Mock
}

type ConnectionStore_Expecter struct {
	mock *mock.Mock
}

func (_m *ConnectionStore) EXPECT() *ConnectionStore_Expecter {
	return &ConnectionStore_Expecter{mock: &_m.Mock}
}

// GetConnection provides a mock function with given fields: app
func (_m *ConnectionStore) GetConnection(app string) (websocket.Connection, error) {
	ret := _m.Called(app)

	var r0 websocket.Connection
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (websocket.Connection, error)); ok {
		return rf(app)
	}
	if rf, ok := ret.Get(0).(func(string) websocket.Connection); ok {
		r0 = rf(app)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(websocket.Connection)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(app)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConnectionStore_GetConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConnection'
type ConnectionStore_GetConnection_Call struct {
	*mock.Call
}

// GetConnection is a helper method to define mock.On call
//   - app string
func (_e *ConnectionStore_Expecter) GetConnection(app interface{}) *ConnectionStore_GetConnection_Call {
	return &ConnectionStore_GetConnection_Call{Call: _e.mock.On("GetConnection", app)}
}

func (_c *ConnectionStore_GetConnection_Call) Run(run func(app string)) *ConnectionStore_GetConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ConnectionStore_GetConnection_Call) Return(_a0 websocket.Connection, _a1 error) *ConnectionStore_GetConnection_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConnectionStore_GetConnection_Call) RunAndReturn(run func(string) (websocket.Connection, error)) *ConnectionStore_GetConnection_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterConnection provides a mock function with given fields: app, conn
func (_m *ConnectionStore) RegisterConnection(app string, conn websocket.Connection) {
	_m.Called(app, conn)
}

// ConnectionStore_RegisterConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterConnection'
type ConnectionStore_RegisterConnection_Call struct {
	*mock.Call
}

// RegisterConnection is a helper method to define mock.On call
//   - app string
//   - conn websocket.Connection
func (_e *ConnectionStore_Expecter) RegisterConnection(app interface{}, conn interface{}) *ConnectionStore_RegisterConnection_Call {
	return &ConnectionStore_RegisterConnection_Call{Call: _e.mock.On("RegisterConnection", app, conn)}
}

func (_c *ConnectionStore_RegisterConnection_Call) Run(run func(app string, conn websocket.Connection)) *ConnectionStore_RegisterConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(websocket.Connection))
	})
	return _c
}

func (_c *ConnectionStore_RegisterConnection_Call) Return() *ConnectionStore_RegisterConnection_Call {
	_c.Call.Return()
	return _c
}

func (_c *ConnectionStore_RegisterConnection_Call) RunAndReturn(run func(string, websocket.Connection)) *ConnectionStore_RegisterConnection_Call {
	_c.Call.Return(run)
	return _c
}

// UnregisterConnection provides a mock function with given fields: app
func (_m *ConnectionStore) UnregisterConnection(app string) (websocket.Connection, error) {
	ret := _m.Called(app)

	var r0 websocket.Connection
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (websocket.Connection, error)); ok {
		return rf(app)
	}
	if rf, ok := ret.Get(0).(func(string) websocket.Connection); ok {
		r0 = rf(app)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(websocket.Connection)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(app)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConnectionStore_UnregisterConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnregisterConnection'
type ConnectionStore_UnregisterConnection_Call struct {
	*mock.Call
}

// UnregisterConnection is a helper method to define mock.On call
//   - app string
func (_e *ConnectionStore_Expecter) UnregisterConnection(app interface{}) *ConnectionStore_UnregisterConnection_Call {
	return &ConnectionStore_UnregisterConnection_Call{Call: _e.mock.On("UnregisterConnection", app)}
}

func (_c *ConnectionStore_UnregisterConnection_Call) Run(run func(app string)) *ConnectionStore_UnregisterConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ConnectionStore_UnregisterConnection_Call) Return(_a0 websocket.Connection, _a1 error) *ConnectionStore_UnregisterConnection_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConnectionStore_UnregisterConnection_Call) RunAndReturn(run func(string) (websocket.Connection, error)) *ConnectionStore_UnregisterConnection_Call {
	_c.Call.Return(run)
	return _c
}

// NewConnectionStore creates a new instance of ConnectionStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConnectionStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConnectionStore {
	mock := &ConnectionStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
