// Code generated by mockery v2.33.1. DO NOT EDIT.

package mocks

import (
	context "context"
	json "encoding/json"

	funcie "github.com/Kapps/funcie/pkg/funcie"

	mock "github.com/stretchr/testify/mock"
)

// Server is an autogenerated mock type for the Server type
type Server struct {
	mock.Mock
}

type Server_Expecter struct {
	mock *mock.Mock
}

func (_m *Server) EXPECT() *Server_Expecter {
	return &Server_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *Server) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Server_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type Server_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *Server_Expecter) Close() *Server_Close_Call {
	return &Server_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *Server_Close_Call) Run(run func()) *Server_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Server_Close_Call) Return(_a0 error) *Server_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Server_Close_Call) RunAndReturn(run func() error) *Server_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Listen provides a mock function with given fields: ctx, addr
func (_m *Server) Listen(ctx context.Context, addr string) error {
	ret := _m.Called(ctx, addr)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, addr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Server_Listen_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Listen'
type Server_Listen_Call struct {
	*mock.Call
}

// Listen is a helper method to define mock.On call
//   - ctx context.Context
//   - addr string
func (_e *Server_Expecter) Listen(ctx interface{}, addr interface{}) *Server_Listen_Call {
	return &Server_Listen_Call{Call: _e.mock.On("Listen", ctx, addr)}
}

func (_c *Server_Listen_Call) Run(run func(ctx context.Context, addr string)) *Server_Listen_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Server_Listen_Call) Return(_a0 error) *Server_Listen_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Server_Listen_Call) RunAndReturn(run func(context.Context, string) error) *Server_Listen_Call {
	_c.Call.Return(run)
	return _c
}

// SendMessage provides a mock function with given fields: ctx, message
func (_m *Server) SendMessage(ctx context.Context, message *funcie.MessageBase[json.RawMessage]) (*funcie.ResponseBase[json.RawMessage], error) {
	ret := _m.Called(ctx, message)

	var r0 *funcie.ResponseBase[json.RawMessage]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *funcie.MessageBase[json.RawMessage]) (*funcie.ResponseBase[json.RawMessage], error)); ok {
		return rf(ctx, message)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *funcie.MessageBase[json.RawMessage]) *funcie.ResponseBase[json.RawMessage]); ok {
		r0 = rf(ctx, message)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*funcie.ResponseBase[json.RawMessage])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *funcie.MessageBase[json.RawMessage]) error); ok {
		r1 = rf(ctx, message)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Server_SendMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMessage'
type Server_SendMessage_Call struct {
	*mock.Call
}

// SendMessage is a helper method to define mock.On call
//   - ctx context.Context
//   - message *funcie.MessageBase[json.RawMessage]
func (_e *Server_Expecter) SendMessage(ctx interface{}, message interface{}) *Server_SendMessage_Call {
	return &Server_SendMessage_Call{Call: _e.mock.On("SendMessage", ctx, message)}
}

func (_c *Server_SendMessage_Call) Run(run func(ctx context.Context, message *funcie.MessageBase[json.RawMessage])) *Server_SendMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*funcie.MessageBase[json.RawMessage]))
	})
	return _c
}

func (_c *Server_SendMessage_Call) Return(_a0 *funcie.ResponseBase[json.RawMessage], _a1 error) *Server_SendMessage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Server_SendMessage_Call) RunAndReturn(run func(context.Context, *funcie.MessageBase[json.RawMessage]) (*funcie.ResponseBase[json.RawMessage], error)) *Server_SendMessage_Call {
	_c.Call.Return(run)
	return _c
}

// NewServer creates a new instance of Server. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Server {
	mock := &Server{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
