// Code generated by mockery v2.33.1. DO NOT EDIT.

package mocks

import (
	context "context"

	publisher "github.com/Kapps/funcie/pkg/funcie/transports/websocket/publisher"
	mock "github.com/stretchr/testify/mock"
)

// Registry is an autogenerated mock type for the Registry type
type Registry struct {
	mock.Mock
}

type Registry_Expecter struct {
	mock *mock.Mock
}

func (_m *Registry) EXPECT() *Registry_Expecter {
	return &Registry_Expecter{mock: &_m.Mock}
}

// AcquireExclusive provides a mock function with given fields: ctx, appId
func (_m *Registry) AcquireExclusive(ctx context.Context, appId string) (publisher.ClientConnection, error) {
	ret := _m.Called(ctx, appId)

	var r0 publisher.ClientConnection
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (publisher.ClientConnection, error)); ok {
		return rf(ctx, appId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) publisher.ClientConnection); ok {
		r0 = rf(ctx, appId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(publisher.ClientConnection)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, appId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Registry_AcquireExclusive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AcquireExclusive'
type Registry_AcquireExclusive_Call struct {
	*mock.Call
}

// AcquireExclusive is a helper method to define mock.On call
//   - ctx context.Context
//   - appId string
func (_e *Registry_Expecter) AcquireExclusive(ctx interface{}, appId interface{}) *Registry_AcquireExclusive_Call {
	return &Registry_AcquireExclusive_Call{Call: _e.mock.On("AcquireExclusive", ctx, appId)}
}

func (_c *Registry_AcquireExclusive_Call) Run(run func(ctx context.Context, appId string)) *Registry_AcquireExclusive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Registry_AcquireExclusive_Call) Return(_a0 publisher.ClientConnection, _a1 error) *Registry_AcquireExclusive_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Registry_AcquireExclusive_Call) RunAndReturn(run func(context.Context, string) (publisher.ClientConnection, error)) *Registry_AcquireExclusive_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: ctx, conn
func (_m *Registry) Register(ctx context.Context, conn publisher.ClientConnection) error {
	ret := _m.Called(ctx, conn)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, publisher.ClientConnection) error); ok {
		r0 = rf(ctx, conn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Registry_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type Registry_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - ctx context.Context
//   - conn publisher.ClientConnection
func (_e *Registry_Expecter) Register(ctx interface{}, conn interface{}) *Registry_Register_Call {
	return &Registry_Register_Call{Call: _e.mock.On("Register", ctx, conn)}
}

func (_c *Registry_Register_Call) Run(run func(ctx context.Context, conn publisher.ClientConnection)) *Registry_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(publisher.ClientConnection))
	})
	return _c
}

func (_c *Registry_Register_Call) Return(_a0 error) *Registry_Register_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Registry_Register_Call) RunAndReturn(run func(context.Context, publisher.ClientConnection) error) *Registry_Register_Call {
	_c.Call.Return(run)
	return _c
}

// ReleaseExclusive provides a mock function with given fields: ctx, appId, conn
func (_m *Registry) ReleaseExclusive(ctx context.Context, appId string, conn publisher.ClientConnection) error {
	ret := _m.Called(ctx, appId, conn)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, publisher.ClientConnection) error); ok {
		r0 = rf(ctx, appId, conn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Registry_ReleaseExclusive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReleaseExclusive'
type Registry_ReleaseExclusive_Call struct {
	*mock.Call
}

// ReleaseExclusive is a helper method to define mock.On call
//   - ctx context.Context
//   - appId string
//   - conn publisher.ClientConnection
func (_e *Registry_Expecter) ReleaseExclusive(ctx interface{}, appId interface{}, conn interface{}) *Registry_ReleaseExclusive_Call {
	return &Registry_ReleaseExclusive_Call{Call: _e.mock.On("ReleaseExclusive", ctx, appId, conn)}
}

func (_c *Registry_ReleaseExclusive_Call) Run(run func(ctx context.Context, appId string, conn publisher.ClientConnection)) *Registry_ReleaseExclusive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(publisher.ClientConnection))
	})
	return _c
}

func (_c *Registry_ReleaseExclusive_Call) Return(_a0 error) *Registry_ReleaseExclusive_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Registry_ReleaseExclusive_Call) RunAndReturn(run func(context.Context, string, publisher.ClientConnection) error) *Registry_ReleaseExclusive_Call {
	_c.Call.Return(run)
	return _c
}

// Unregister provides a mock function with given fields: ctx, appId
func (_m *Registry) Unregister(ctx context.Context, appId string) error {
	ret := _m.Called(ctx, appId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, appId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Registry_Unregister_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unregister'
type Registry_Unregister_Call struct {
	*mock.Call
}

// Unregister is a helper method to define mock.On call
//   - ctx context.Context
//   - appId string
func (_e *Registry_Expecter) Unregister(ctx interface{}, appId interface{}) *Registry_Unregister_Call {
	return &Registry_Unregister_Call{Call: _e.mock.On("Unregister", ctx, appId)}
}

func (_c *Registry_Unregister_Call) Run(run func(ctx context.Context, appId string)) *Registry_Unregister_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Registry_Unregister_Call) Return(_a0 error) *Registry_Unregister_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Registry_Unregister_Call) RunAndReturn(run func(context.Context, string) error) *Registry_Unregister_Call {
	_c.Call.Return(run)
	return _c
}

// NewRegistry creates a new instance of Registry. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRegistry(t interface {
	mock.TestingT
	Cleanup(func())
}) *Registry {
	mock := &Registry{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
