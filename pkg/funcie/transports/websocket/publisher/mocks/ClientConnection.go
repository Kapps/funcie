// Code generated by mockery v2.33.1. DO NOT EDIT.

package mocks

import (
	context "context"
	json "encoding/json"

	funcie "github.com/Kapps/funcie/pkg/funcie"

	mock "github.com/stretchr/testify/mock"

	websocket "nhooyr.io/websocket"
)

// ClientConnection is an autogenerated mock type for the ClientConnection type
type ClientConnection struct {
	mock.Mock
}

type ClientConnection_Expecter struct {
	mock *mock.Mock
}

func (_m *ClientConnection) EXPECT() *ClientConnection_Expecter {
	return &ClientConnection_Expecter{mock: &_m.Mock}
}

// ApplicationId provides a mock function with given fields:
func (_m *ClientConnection) ApplicationId() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ClientConnection_ApplicationId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplicationId'
type ClientConnection_ApplicationId_Call struct {
	*mock.Call
}

// ApplicationId is a helper method to define mock.On call
func (_e *ClientConnection_Expecter) ApplicationId() *ClientConnection_ApplicationId_Call {
	return &ClientConnection_ApplicationId_Call{Call: _e.mock.On("ApplicationId")}
}

func (_c *ClientConnection_ApplicationId_Call) Run(run func()) *ClientConnection_ApplicationId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ClientConnection_ApplicationId_Call) Return(_a0 string) *ClientConnection_ApplicationId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientConnection_ApplicationId_Call) RunAndReturn(run func() string) *ClientConnection_ApplicationId_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with given fields: code, reason
func (_m *ClientConnection) Close(code websocket.StatusCode, reason string) error {
	ret := _m.Called(code, reason)

	var r0 error
	if rf, ok := ret.Get(0).(func(websocket.StatusCode, string) error); ok {
		r0 = rf(code, reason)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientConnection_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type ClientConnection_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
//   - code websocket.StatusCode
//   - reason string
func (_e *ClientConnection_Expecter) Close(code interface{}, reason interface{}) *ClientConnection_Close_Call {
	return &ClientConnection_Close_Call{Call: _e.mock.On("Close", code, reason)}
}

func (_c *ClientConnection_Close_Call) Run(run func(code websocket.StatusCode, reason string)) *ClientConnection_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(websocket.StatusCode), args[1].(string))
	})
	return _c
}

func (_c *ClientConnection_Close_Call) Return(_a0 error) *ClientConnection_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientConnection_Close_Call) RunAndReturn(run func(websocket.StatusCode, string) error) *ClientConnection_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields: ctx, message
func (_m *ClientConnection) Read(ctx context.Context, message interface{}) error {
	ret := _m.Called(ctx, message)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) error); ok {
		r0 = rf(ctx, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientConnection_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type ClientConnection_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - ctx context.Context
//   - message interface{}
func (_e *ClientConnection_Expecter) Read(ctx interface{}, message interface{}) *ClientConnection_Read_Call {
	return &ClientConnection_Read_Call{Call: _e.mock.On("Read", ctx, message)}
}

func (_c *ClientConnection_Read_Call) Run(run func(ctx context.Context, message interface{})) *ClientConnection_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}))
	})
	return _c
}

func (_c *ClientConnection_Read_Call) Return(_a0 error) *ClientConnection_Read_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientConnection_Read_Call) RunAndReturn(run func(context.Context, interface{}) error) *ClientConnection_Read_Call {
	_c.Call.Return(run)
	return _c
}

// Send provides a mock function with given fields: ctx, message
func (_m *ClientConnection) Send(ctx context.Context, message *funcie.MessageBase[json.RawMessage]) (*funcie.ResponseBase[json.RawMessage], error) {
	ret := _m.Called(ctx, message)

	var r0 *funcie.ResponseBase[json.RawMessage]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *funcie.MessageBase[json.RawMessage]) (*funcie.ResponseBase[json.RawMessage], error)); ok {
		return rf(ctx, message)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *funcie.MessageBase[json.RawMessage]) *funcie.ResponseBase[json.RawMessage]); ok {
		r0 = rf(ctx, message)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*funcie.ResponseBase[json.RawMessage])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *funcie.MessageBase[json.RawMessage]) error); ok {
		r1 = rf(ctx, message)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientConnection_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type ClientConnection_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - ctx context.Context
//   - message *funcie.MessageBase[json.RawMessage]
func (_e *ClientConnection_Expecter) Send(ctx interface{}, message interface{}) *ClientConnection_Send_Call {
	return &ClientConnection_Send_Call{Call: _e.mock.On("Send", ctx, message)}
}

func (_c *ClientConnection_Send_Call) Run(run func(ctx context.Context, message *funcie.MessageBase[json.RawMessage])) *ClientConnection_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*funcie.MessageBase[json.RawMessage]))
	})
	return _c
}

func (_c *ClientConnection_Send_Call) Return(_a0 *funcie.ResponseBase[json.RawMessage], _a1 error) *ClientConnection_Send_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientConnection_Send_Call) RunAndReturn(run func(context.Context, *funcie.MessageBase[json.RawMessage]) (*funcie.ResponseBase[json.RawMessage], error)) *ClientConnection_Send_Call {
	_c.Call.Return(run)
	return _c
}

// Write provides a mock function with given fields: ctx, message
func (_m *ClientConnection) Write(ctx context.Context, message interface{}) error {
	ret := _m.Called(ctx, message)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) error); ok {
		r0 = rf(ctx, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientConnection_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type ClientConnection_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - ctx context.Context
//   - message interface{}
func (_e *ClientConnection_Expecter) Write(ctx interface{}, message interface{}) *ClientConnection_Write_Call {
	return &ClientConnection_Write_Call{Call: _e.mock.On("Write", ctx, message)}
}

func (_c *ClientConnection_Write_Call) Run(run func(ctx context.Context, message interface{})) *ClientConnection_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}))
	})
	return _c
}

func (_c *ClientConnection_Write_Call) Return(_a0 error) *ClientConnection_Write_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientConnection_Write_Call) RunAndReturn(run func(context.Context, interface{}) error) *ClientConnection_Write_Call {
	_c.Call.Return(run)
	return _c
}

// NewClientConnection creates a new instance of ClientConnection. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientConnection(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientConnection {
	mock := &ClientConnection{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
