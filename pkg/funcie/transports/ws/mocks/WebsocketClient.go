// Code generated by mockery v2.21.1. DO NOT EDIT.

package mocks

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"

	websocket "nhooyr.io/websocket"

	ws "github.com/Kapps/funcie/pkg/funcie/transports/ws"
)

// WebsocketClient is an autogenerated mock type for the WebsocketClient type
type WebsocketClient struct {
	mock.Mock
}

type WebsocketClient_Expecter struct {
	mock *mock.Mock
}

func (_m *WebsocketClient) EXPECT() *WebsocketClient_Expecter {
	return &WebsocketClient_Expecter{mock: &_m.Mock}
}

// Dial provides a mock function with given fields: ctx, u, opts
func (_m *WebsocketClient) Dial(ctx context.Context, u string, opts *websocket.DialOptions) (ws.Websocket, *http.Response, error) {
	ret := _m.Called(ctx, u, opts)

	var r0 ws.Websocket
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *websocket.DialOptions) (ws.Websocket, *http.Response, error)); ok {
		return rf(ctx, u, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *websocket.DialOptions) ws.Websocket); ok {
		r0 = rf(ctx, u, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ws.Websocket)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *websocket.DialOptions) *http.Response); ok {
		r1 = rf(ctx, u, opts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, *websocket.DialOptions) error); ok {
		r2 = rf(ctx, u, opts)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// WebsocketClient_Dial_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Dial'
type WebsocketClient_Dial_Call struct {
	*mock.Call
}

// Dial is a helper method to define mock.On call
//   - ctx context.Context
//   - u string
//   - opts *websocket.DialOptions
func (_e *WebsocketClient_Expecter) Dial(ctx interface{}, u interface{}, opts interface{}) *WebsocketClient_Dial_Call {
	return &WebsocketClient_Dial_Call{Call: _e.mock.On("Dial", ctx, u, opts)}
}

func (_c *WebsocketClient_Dial_Call) Run(run func(ctx context.Context, u string, opts *websocket.DialOptions)) *WebsocketClient_Dial_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*websocket.DialOptions))
	})
	return _c
}

func (_c *WebsocketClient_Dial_Call) Return(_a0 ws.Websocket, _a1 *http.Response, _a2 error) *WebsocketClient_Dial_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *WebsocketClient_Dial_Call) RunAndReturn(run func(context.Context, string, *websocket.DialOptions) (ws.Websocket, *http.Response, error)) *WebsocketClient_Dial_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewWebsocketClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewWebsocketClient creates a new instance of WebsocketClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewWebsocketClient(t mockConstructorTestingTNewWebsocketClient) *WebsocketClient {
	mock := &WebsocketClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
